.TH "C:/Users/Avery/Desktop/Nimble Game Engine/Nimble Game Engine Library/include/Nimble/NimbleEngine/Output/Errors.h" 3 "Mon Aug 17 2020" "Version 0.1.0" "Nimble Game Engine Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/Avery/Desktop/Nimble Game Engine/Nimble Game Engine Library/include/Nimble/NimbleEngine/Output/Errors.h \- This class defines error values and has error parsing functions\&.  

.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./\&.\&./NimbleLicense\&.h'\fP
.br
\fC#include '\&.\&./\&.\&./NimbleEngine\&.h'\fP
.br
\fC#include <limits\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBNIMBLE_ENGINE_ERRORS_H\fP"
.br
.RI "Header definition\&. "
.ti -1c
.RI "#define \fBNSUCCESS\fP   (int32_t) 0"
.br
.RI "Returned when a function succeeds\&. "
.ti -1c
.RI "#define \fBNERROR\fP   (int32_t) \-1"
.br
.RI "Returned when a function encounters an error\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBnErrors\fP { \fBNERROR_UNKNOWN\fP = INT_MIN, \fBNERROR_NULL\fP, \fBNERROR_FILE_NOT_FOUND\fP }"
.br
.RI "The possible error values used by \fBErrorHandler\&.h\fP error handler\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBNIMBLE_EXPORT\fP char * \fBnErrorToString\fP (char *dst, const int32_t error, const char *info)"
.br
.RI "Describes an error and returns a string\&. "
.ti -1c
.RI "\fBNIMBLE_EXPORT\fP char * \fBnErrorGetStacktrace\fP (char *dst, int32_t *size, int32_t *levels)"
.br
.RI "Returns the current stack trace as a string\&. "
.in -1c
.SH "Detailed Description"
.PP 
This class defines error values and has error parsing functions\&. 


.PP
\fBAuthor\fP
.RS 4
Avery Aaron 
.RE
.PP
\fBCopyright\fP
.RS 4
The MIT License (MIT) Copyright (C) 2020 Avery Aaron business.a3ology@gmail.com
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software\&.
.PP
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\&. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE\&. 
.RE
.PP
.PP
\fBDate\fP
.RS 4
2020-08-14 
.RE
.PP

.PP
Definition in file \fBErrors\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define NERROR   (int32_t) \-1"

.PP
Returned when a function encounters an error\&. 
.PP
Definition at line 55 of file Errors\&.h\&.
.SS "#define NIMBLE_ENGINE_ERRORS_H"

.PP
Header definition\&. 
.PP
Definition at line 47 of file Errors\&.h\&.
.SS "#define NSUCCESS   (int32_t) 0"

.PP
Returned when a function succeeds\&. 
.PP
Definition at line 54 of file Errors\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBnErrors\fP"

.PP
The possible error values used by \fBErrorHandler\&.h\fP error handler\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINERROR_UNKNOWN \fP\fP
Unknown error\&. 
.TP
\fB\fINERROR_NULL \fP\fP
A variable was null when it was expecting a value\&. 
.TP
\fB\fINERROR_FILE_NOT_FOUND \fP\fP
A file was not found where specified\&. 
.PP
Definition at line 60 of file Errors\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBNIMBLE_EXPORT\fP char* nErrorGetStacktrace (char * dst, int32_t * size, int32_t * levels)"

.PP
Returns the current stack trace as a string\&. Returns the current stack trace as a string, and sets \fC\fP 
.PP
Example: 
.PP
.nf
#include <stdio\&.h>
#include <stdlib\&.h>
#include <Nimble/NimbleEngine\&.h>

int main(int argc, char ** argv)
{
    int32_t levels, size;
    char * stack;
    nErrorGetStacktrace(stack, &levels, &size);
    if (stack == NULL)
    {
        fprintf(stderr, "Failed to get stack trace\&.\n");
        exit(EXIT_FAILURE);
    }
    printf("Last %d levels of stack trace: %s\n", levels, stack);
    return EXIT_SUCCESS;
}

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIdst\fP The destination to store the stacktrace string\&. 
.br
\fIsize\fP The length of the string returned, including the null character\&. This can be NULL\&. 
.br
\fIlevels\fP The number of levels of the stack\&. This can be NULL\&. 
.RE
.PP
\fBReturns\fP
.RS 4
\fCdst\fP is returned if successful; otherwise \fC\fBNULL\fP\fP is returned and a corresponding error is sent to the error callback set by \fBnErrorHandlerSetErrorCallback()\fP\&.
.RE
.PP
\fBNote\fP
.RS 4
Each time a function is called, it is added to the stack\&. When a function returns, it is removed from the stack\&. 
.RE
.PP

.SS "\fBNIMBLE_EXPORT\fP char* nErrorToString (char * dst, const int32_t error, const char * info)"

.PP
Describes an error and returns a string\&. Example: 
.PP
.nf
#include <stdio\&.h>
#include <stdlib\&.h>
#include <Nimble/NimbleEngine\&.h>

int main(int argc, char ** argv)
{
    char * errorString;
    nErrorToString(errorString, NERROR_FILE_NOT_FOUND, "example\&.txt");
    if (errorString == NULL)
    {
        fprintf(stderr, "Failed to get error string\&.\n");
        exit(EXIT_FAILURE);
    }
    printf("NERROR_NULL as string: %s\n", errorString);
    return EXIT_SUCCESS;
}

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIdst\fP The destination to store the string describing \fCerror\fP\&. 
.br
\fIerror\fP The error to get described\&. 
.br
\fIinfo\fP Relevant information, such as a file location, that could help diagnose the error\&. This can be \fBNULL\fP\&. 
.RE
.PP
\fBReturns\fP
.RS 4
\fCdst\fP is returned if successful; otherwise \fC\fBNULL\fP\fP is returned\&. 
.RE
.PP
TODO Throw error
.PP
Definition at line 23 of file Errors\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Nimble Game Engine Library from the source code\&.
