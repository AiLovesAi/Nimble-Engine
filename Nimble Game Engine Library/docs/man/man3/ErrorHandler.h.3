.TH "C:/Users/Avery/Desktop/Nimble Game Engine/Nimble Game Engine Library/include/Nimble/NimbleEngine/Output/ErrorHandler.h" 3 "Sun Aug 16 2020" "Version 0.1.0" "Nimble Game Engine Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/Avery/Desktop/Nimble Game Engine/Nimble Game Engine Library/include/Nimble/NimbleEngine/Output/ErrorHandler.h \- This class handles errors thrown by the engine\&. This class handles errors thrown by the engine, and defines functions the developer can send callback functions to\&.  

.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./\&.\&./\&.\&./\&.\&./License/NimbleLicense\&.h'\fP
.br
\fC#include '\&.\&./\&.\&./NimbleEngine\&.h'\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBNIMBLE_ENGINE_ERROR_HANDLER_H\fP"
.br
.RI "Header definition\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBNIMBLE_EXPORT\fP int32_t \fBnErrorHandlerSetErrorCallback\fP (int32_t(*callback)(const char *, const char *, const char *, const time_t),)"
.br
.RI "Sets the callback function to handle errors\&. "
.in -1c
.SH "Detailed Description"
.PP 
This class handles errors thrown by the engine\&. This class handles errors thrown by the engine, and defines functions the developer can send callback functions to\&. 


.PP
\fBAuthor\fP
.RS 4
Avery Aaron 
.RE
.PP
\fBCopyright\fP
.RS 4
The MIT License (MIT) Copyright (C) 2020 Avery Aaron business.a3ology@gmail.com
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software\&.
.PP
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\&. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE\&. 
.RE
.PP
.PP
\fBDate\fP
.RS 4
2020-08-16 
.RE
.PP

.PP
Definition in file \fBErrorHandler\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define NIMBLE_ENGINE_ERROR_HANDLER_H"

.PP
Header definition\&. 
.PP
Definition at line 49 of file ErrorHandler\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBNIMBLE_EXPORT\fP int32_t nErrorHandlerSetErrorCallback (int32_t(*)(const char *, const char *, const char *, const time_t) callback)"

.PP
Sets the callback function to handle errors\&. Sets the callback function \fCcallback\fP that gets called when an error occurs\&.
.PP
\fBExample:\fP
.RS 4

.PP
.nf
#include <stdio\&.h>
#include <stdlib\&.h>
#include <time\&.h>
#include <Nimble/NimbleEngine\&.h>

void errorHandler(const char * error,
                  const char * description,
                  const char * stack,
                  const time_t errorTime
                  ) {
    struct tm * timeInfo = localtime(&errorTime);
    const char format[] = "%x %X %Z";
    const char example = "01/01/2020 16:30:45 GMT"
    char * timeString = malloc(sizeof(void *) + sizeof(example));
    if (timeString == NULL) {
        fprintf(stderr,
                "Failed to allocate to timeString\&.\n"
                );
        return;
    }
    strftime(timeString, sizeof(example), format, timeInfo);
    
    fprintf(stderr,
            "\nAn error occurred at %s:\nError name: %s\nError description: "\
            "%s\nStack trace: %s\n\n",
            timeString,
            error,
            description,
            stack
            );
}

int main(int argc, char ** argv) {
    if (nErrorHandlerSetErrorCallback(errorHandler) == NERROR) {
        fprintf(stderr,
                "Could not set error callback for Nimble\&.\n"
                );
        return EXIT_FAILURE;
    }
    printf("Successfully set error callback for Nimble\&.\n");
    return EXIT_SUCCESS;
}

.fi
.PP
.RE
.PP
\fBParameters\fP
.RS 4
\fIcallback\fP The function that gets called 
.RE
.PP
\fBReturns\fP
.RS 4
\fBNSUCCESS\fP is returned if successful; otherwise \fC\fBNERROR\fP\fP is returned\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Nimble Game Engine Library from the source code\&.
