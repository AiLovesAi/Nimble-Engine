#include "../../NimbleLicense.h"
/*
 * Errors.h
 * Nimble Engine
 *
 * Created by Avery Aaron on 2020-08-14.
 * Copyright (C) 2020-2021 Avery Aaron <business.a3ology@gmail.com>
 *
 */

/**
 * @file Errors.h
 * @author Avery Aaron
 * @copyright
 * @parblock
 * The MIT License (MIT)
 * Copyright (C) 2020-2021 Avery Aaron <business.a3ology@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * @endparblock
 * @date 2020-08-14
 *
 * @brief This class defines error handling functions.
 */

#ifdef __cplusplus
extern "C" {
#endif

#ifndef NIMBLE_ENGINE_ERRORS_H
#define NIMBLE_ENGINE_ERRORS_H /**< Header definition */

#include "../../Nimble.h"

#if NIMBLE_OS == NIMBLE_WINDOWS
#include <Windows.h>
#endif

#include "ErrorValues.h"
#include "../../System/Time.h"
#include "../../System/Threads.h"


#ifndef NERRORS_STACK_MAX
#  define NERRORS_STACK_MAX 512 /**< The maximum stack levels to take from nErrorStacktrace(). */
#endif
#define NERRORS_STACK_DEFAULT 32 /**< The default number of stack levels to take from nErrorStacktrace(). */

typedef struct nErrorInfo {
    int error; /**< The error value of the error. */
    nTime_t time; /**< The time the error occurred. */

    const char *errorStr; /**< The error name of the error. */
    size_t errorLen; /**< The length of the error name. */

    const char *descStr; /**< The description of the error. */
    size_t descLen; /**< The length of the description. */

    char *sysDescStr; /* The description of the error generated by the system. */
    size_t sysDescLen; /**< The length of the system description. */

    char *infoStr; /**< The info on what caused the error. */
    size_t infoLen; /**< The length of the info. */

    char *stackStr; /**< The stack at the time of the error. */
    size_t stackLen; /**< The length of the stack string. */
    int stackLevels;
} nErrorInfo_t;

/**
 * @brief When true, errors for this thread will be ignored.
 * When true, errors for this thread will be ignored, and error handling
 * functions will not be invoked.
 */
extern __thread _Bool nErrorsIgnored;
extern nMutex_t nStacktraceMutex;

/**
 * @brief Sends an error to the error callback.
 * 
 * Sends an error to the error callback defined by
 * nErrorHandlerSetErrorCallback(), and determines whether or not crashing is
 * necessary.
 *
 * @param[in] error The error to throw.
 * @param[in] info Relevant information, such as a file location, that
 * could help diagnose the error. This can be @c #NULL.
 * @param[in] infoLen The length of the @p info argument. A length of
 * zero (0) uses strlen() to determine length.
 * @param[in] setError If set, the function will try to find an error through
 * nErrorLast(), and use @p error as a default.
 * @return Returns the final error.
 *
 * @note The program will crash if this is unsuccessful.
 */
NIMBLE_EXPORT
NIMBLE_EXTERN
int nErrorThrow(const int error,
            const char *info,
            size_t infoLen,
            const int setError);

/**
 * @brief Clears the current errors.
 */
NIMBLE_INLINE
void nErrorClear(void)
{
    errno = 0;
#if NIMBLE_OS == NIMBLE_WINDOWS
    SetLastError(ERROR_SUCCESS);
#endif
}

/**
 * @brief Returns the last @c errno error and clears @c errno.
 * 
 * @return Returns the last errno error.
 */
NIMBLE_INLINE
int nErrorLastErrno(void)
{
    int error = errno;
    errno = 0;
    return error;
}

#if NIMBLE_OS == NIMBLE_WINDOWS
/**
 * @brief Returns the last Windows error and clears it.
 * 
 * @return Returns the last Windows error.
 */
NIMBLE_INLINE
int nErrorLastWindows(void)
{
    int error = GetLastError();
    SetLastError(ERROR_SUCCESS);
    return error;
}
#endif

/**
 * @brief Returns the last error and sets @p dst to the system's error description.
 * 
 * @param[out] sysDescLen The length of the error description. This can be #NULL.
 * @param[out] sysDescStr A pointer to the string to set to the system's error
 * description. This can be #NULL.
 * @return The NERROR version of the found error is returned.
 * 
 * @note @p sysDescStr should be freed before invoking, and is allocated, so it
 * should be freed using nFree().
 */
NIMBLE_EXPORT
NIMBLE_EXTERN
int nErrorLast(size_t *sysDescLen,
               char **sysDescStr);

/**
 * @brief Throws an error with @p info if @p check is equal to zero.
 * 
 * @param[in] check The statement to check if true.
 * @param[in] error The default error to crash with (overridden if errno is set).
 * @param[in] info The info string to crash with if false. This can be #NULL to
 * not throw an error.
 * @param[in] infoLen The length of @p info.
 * 
 * @return #NSUCCESS is returned if @p check passes; otherwise, the error generated
 * by nErrorThrow() is returned.
 */
NIMBLE_INLINE
int nErrorAssert(const int check,
                 const int error,
                 const char *info,
                 const size_t infoLen)
{
    if (!check && info && !nErrorsIgnored)
     return nErrorThrow(error, info, infoLen, 1);
    return NSUCCESS;
}

/**
 * @brief Returns a #nErrorInfo_t of @p error and @p info.
 * 
 * @param[out] errorInfo The error info to set.
 * @param[in] error The error value to set.
 * @param[in] errorTime The time the error occurred. This can be 0
 * to use nTime().
 * @param[in] info The info of what caused the error.
 * @param[in] infoLen The length of @p info.
 * @param[in] sysDescStr The system description of the error.
 * @param[in] sysDescLen The length of @p sysDescStr.
 */
NIMBLE_EXPORT
NIMBLE_EXTERN
void nErrorInfoSet(nErrorInfo_t *restrict errorInfo,
              const int error,
              const nTime_t errorTime,
              const char *restrict info,
              size_t infoLen,
              const char *sysDescStr,
              size_t sysDescLen);

/**
 * @brief Frees a #nErrorInfo_t structure.
 * 
 * @param[in] errorInfo The error info to free.
 */
NIMBLE_EXPORT
NIMBLE_EXTERN
void nErrorInfoFree(nErrorInfo_t *errorInfo);

/**
 * @brief Sets the callback function to handle errors.
 * 
 * Sets the callback function @p callback that gets called when an error occurs.
 *
 * @param[in] callback The function that gets called when an error occurs. This
 * can be #NULL to use the default callback.
 */
NIMBLE_EXPORT
NIMBLE_EXTERN
void nErrorSetCallback(void (*callback)(const nErrorInfo_t errorInfo));

/**
 * @brief Returns the current stack trace as a string.
 * 
 * Returns the current stack trace as a string, and sets the @p stackLen of the
 * string and @p levels of the stack.
 *
 * @param[out] stackLen The length of the string returned. This can be @c #NULL.
 * @param[in,out] stackLevels The number of levels found on the stack. If the
 * value of this is nonzero when passed, it will act as the maximum number of
 * stack levels to be returned. This can be @c #NULL.
 * @return A pointer to the string of the stack is returned if successful;
 * otherwise @c #NULL is returned.
 *
 * @note Each time a function is called, it is added to the stack. When a
 * function returns, it is removed from the stack.
 */
NIMBLE_EXPORT
NIMBLE_USE_RESULT
NIMBLE_EXTERN
char *
nErrorStacktrace(size_t *restrict stackLen,
                 int *restrict stackLevels);

#endif // NIMBLE_ENGINE_ERRORS_H

#ifdef __cplusplus
}
#endif

// Errors.h
